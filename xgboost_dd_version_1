import pandas as pd
import numpy as np
from rdkit import Chem
from rdkit.Chem import Descriptors, rdMolDescriptors, AllChem
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, roc_auc_score
from sklearn.model_selection import GridSearchCV
from imblearn.over_sampling import SMOTE
import shap
import sqlite3
import os
from multiprocessing import Pool, cpu_count
import warnings
from tqdm import tqdm
warnings.simplefilter(action='ignore', category=UserWarning)

xgb = XGBClassifier(eval_metric='logloss')

# âœ… Suppress RDKit Warnings
from rdkit import RDLogger
RDLogger.DisableLog('rdApp.*')

# âœ… Step 1: Load ChEMBL Database and Extract Data
print("ðŸ”¹ Step 1: Loading ChEMBL database...")
chembl_db_path = "chembl_35.db"
conn = sqlite3.connect(chembl_db_path)

# Check available columns before querying
cursor = conn.cursor()
cursor.execute("PRAGMA table_info(activities);")
available_columns = [row[1] for row in cursor.fetchall()]
cursor.execute("PRAGMA table_info(compound_structures);")
available_columns += [row[1] for row in cursor.fetchall()]
cursor.execute("PRAGMA table_info(assays);")
available_columns += [row[1] for row in cursor.fetchall()]

# Only select columns that exist
selected_columns = [
    "compound_structures.canonical_smiles",
    "activities.standard_value",
    "activities.standard_units",
    "assays.assay_type",
    "assays.confidence_score"
]

optional_columns = ["compound_properties", "assay_parameters", "ligand_eff", "target_components"]
existing_optional_columns = [col for col in optional_columns if col in available_columns]
selected_columns += existing_optional_columns

query = f"""
SELECT {', '.join(selected_columns)}
FROM activities
JOIN compound_structures ON activities.molregno = compound_structures.molregno
JOIN assays ON activities.assay_id = assays.assay_id
WHERE activities.standard_units = 'nM'
AND activities.standard_value IS NOT NULL
AND assays.confidence_score >= 7;
"""

screening_data = pd.read_sql(query, conn)
conn.close()
print("âœ… Step 1 completed.")

# âœ… Step 2: Convert IC50 to pIC50 and Label as Active/Inactive
print("ðŸ”¹ Step 2: Converting IC50 values to pIC50...")
def convert_ic50_to_pic50(ic50):
    if ic50 <= 0:
        return np.nan
    return -np.log10(ic50 * 1e-9)

screening_data["pIC50"] = screening_data["standard_value"].apply(convert_ic50_to_pic50)
screening_data.dropna(subset=["pIC50"], inplace=True)
screening_data["Active"] = screening_data["pIC50"].apply(lambda x: 1 if x >= 6 else 0)
print("âœ… Step 2 completed.")

# âœ… Step 2.5: Filter Valid SMILES
print("ðŸ”¹ Step 2.5: Filtering valid SMILES...")
def is_valid_smiles(smiles):
    return Chem.MolFromSmiles(smiles) is not None

before_filtering = len(screening_data)
screening_data = screening_data[screening_data["canonical_smiles"].apply(is_valid_smiles)]
print(f"âœ… Step 2.5 completed. Removed {before_filtering - len(screening_data)} invalid SMILES.")

# âœ… Step 3: Calculate Molecular Descriptors with Parallel Processing & Combine with ChEMBL Features
print("ðŸ”¹ Step 3: Calculating molecular descriptors using multiprocessing...")
def calculate_descriptors(smiles):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        return [
            Descriptors.MolWt(mol),
            Descriptors.MolLogP(mol),
            Descriptors.TPSA(mol),
            Descriptors.NumRotatableBonds(mol),
            rdMolDescriptors.CalcNumHBD(mol),
            rdMolDescriptors.CalcNumHBA(mol)
        ]
    else:
        return [np.nan] * 6

def process_smiles_parallel(smiles_list):
    with Pool(cpu_count() - 1) as pool:
        return list(tqdm(pool.imap(calculate_descriptors, smiles_list), total=len(smiles_list)))

smiles_list = screening_data["canonical_smiles"].tolist()
descriptor_results = process_smiles_parallel(smiles_list)

rdkit_descriptor_columns = ["MolWt", "LogP", "TPSA", "NumRotBonds", "HBD", "HBA"]
rdkit_descriptor_df = pd.DataFrame(descriptor_results, columns=rdkit_descriptor_columns)

# âœ… Merge RDKit Descriptors with ChEMBL Features
descriptor_columns = existing_optional_columns
screening_data = pd.concat([screening_data.reset_index(drop=True), rdkit_descriptor_df], axis=1)
screening_data.dropna(subset=descriptor_columns + rdkit_descriptor_columns, inplace=True)
print(f"âœ… Step 3 completed. {len(screening_data)} molecules processed successfully.")

# âœ… Step 4: Train XGBoost Model
print("ðŸ”¹ Step 4: Training XGBoost model...")
X = screening_data[rdkit_descriptor_columns]
y = screening_data["Active"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

xgb = XGBClassifier(eval_metric='logloss')
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [3, 5, 7],
    'learning_rate': [0.01, 0.1, 0.2]
}
grid_search = GridSearchCV(xgb, param_grid, scoring='roc_auc', cv=3, verbose=1, n_jobs=-1)
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_
best_model.fit(X_train, y_train)
y_pred = best_model.predict(X_test)
y_pred_proba = best_model.predict_proba(X_test)[:, 1]

print(f"Best Model Parameters: {grid_search.best_params_}")
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(f"ROC AUC Score: {roc_auc_score(y_test, y_pred_proba)}")
print("âœ… Step 4 completed.")

screening_data['prediction'] = best_model.predict(X)
active_molecules = screening_data[screening_data['prediction'] == 1]
active_molecules.to_csv("active_molecules.csv", index=False)
print("âœ… Active molecules saved to 'active_molecules.csv'")

# âœ… Step 5: Apply TDP-43 Active Site Filtering
print("ðŸ”¹ Step 5: Filtering molecules for TDP-43 active sites...")
from rdkit.Chem import AllChem
from rdkit.Chem import rdMolTransforms
import numpy as np

# ðŸ”¹ Step 5: Set Active Site Coordinates for TDP-43
tdp_x, tdp_y, tdp_z = 49.4174, 20.0641, -46.7476  # Active site coordinates

# ðŸ”¹ Function: Compute Distance Between Molecule & Active Site
def compute_distance_to_tdp43(smiles):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        try:
            # Generate 3D Conformer
            mol = Chem.AddHs(mol)
            AllChem.EmbedMolecule(mol, AllChem.ETKDG())  # Generate 3D structure
            AllChem.UFFOptimizeMolecule(mol)  # Optimize the conformation

            # Compute Molecule Centroid
            conf = mol.GetConformer()
            mol_coords = np.mean([conf.GetAtomPosition(i) for i in range(mol.GetNumAtoms())], axis=0)
            
            # Compute Distance from TDP-43 Active Site
            dist = np.linalg.norm(np.array([tdp_x, tdp_y, tdp_z]) - mol_coords)
            return dist
        except:
            return np.nan  # Return NaN if molecule fails to generate a 3D structure
    return np.nan

# âœ… Step 5: Apply TDP-43 Active Site Filtering with Multiprocessing
print("ðŸ”¹ Step 5: Filtering molecules for TDP-43 active site using multiprocessing...")
tdp_x, tdp_y, tdp_z = 49.4174, 20.0641, -46.7476  # Active site coordinates

def compute_distance_to_tdp43(smiles):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        try:
            mol = Chem.AddHs(mol)
            AllChem.EmbedMolecule(mol, AllChem.ETKDG())
            AllChem.UFFOptimizeMolecule(mol)
            conf = mol.GetConformer()
            mol_coords = np.mean([conf.GetAtomPosition(i) for i in range(mol.GetNumAtoms())], axis=0)
            dist = np.linalg.norm(np.array([tdp_x, tdp_y, tdp_z]) - mol_coords)
            return dist
        except:
            return np.nan
    return np.nan

def process_distances_parallel(smiles_list):
    with Pool(cpu_count() - 1) as pool:
        return list(tqdm(pool.imap(compute_distance_to_tdp43, smiles_list), total=len(smiles_list)))

print("ðŸ”¹ Filtering molecules by distance to TDP-43 active site...")
active_molecules = screening_data[screening_data['Active'] == 1]
smiles_list = active_molecules["canonical_smiles"].tolist()
distances = process_distances_parallel(smiles_list)

active_molecules["tdp43_distance"] = distances

distance_cutoff = 5.0
tdp43_molecules = active_molecules[active_molecules["tdp43_distance"] <= distance_cutoff]

tdp43_molecules.to_csv("tdp43_active_molecules.csv", index=False)
print(f"âœ… TDP-43 molecules saved: {len(tdp43_molecules)} within {distance_cutoff} Ã…")
